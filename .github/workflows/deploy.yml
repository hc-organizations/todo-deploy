name: Deploy to VM

on:
  repository_dispatch:
    types: [frontend-update, backend-update]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DEPLOY_PATH: /home/${{ secrets.VM_USER }}/deploy

    steps:
      - name: Checkout deploy repo
        uses: actions/checkout@v3

      # ── 권한 수정 단계 추가 ──
      - name: Ensure deploy dir exists & owned by VM_USER
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            # 디렉터리 생성
            sudo mkdir -p $DEPLOY_PATH
            # 소유자를 VM_USER로 변경 (non-root 유저가 쓰도록)
            sudo chown -R ${{ secrets.VM_USER }}:${{ secrets.VM_USER }} $DEPLOY_PATH

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: docker-compose.yml
          target: $DEPLOY_PATH/docker-compose.yml

      - name: Generate .env on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            cat > $DEPLOY_PATH/.env <<EOF
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            API_URL=${{ secrets.API_URL }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            ASYNC_DATABASE_URL=${{ secrets.ASYNC_DATABASE_URL }}
            SYNC_DATABASE_URL=${{ secrets.SYNC_DATABASE_URL }}
            DB_ECHO_LOG=${{ secrets.DB_ECHO_LOG }}
            EOF

      - name: Set SERVICE from dispatch payload
        run: echo "SERVICE=${{ github.event.client_payload.service }}" >> $GITHUB_ENV

      - name: Deploy updated service via Docker Compose
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            cd $DEPLOY_PATH
            docker compose pull $SERVICE
            docker compose up -d $SERVICE
