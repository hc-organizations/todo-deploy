# todo-deploy/.github/workflows/deploy.yml
name: Deploy to VM

on:
  repository_dispatch:
    types: [frontend-update, backend-update]
  workflow_dispatch:
    inputs:
      service:
        description: "배포할 서비스 이름 (frontend 또는 backend)"
        required: true
        default: "frontend"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 어떤 서비스가 업데이트됐는지 저장
      - name: Set SERVICE from event
        id: set-service
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "SERVICE=${{ github.event.client_payload.service }}" >> $GITHUB_ENV
          else
            echo "SERVICE=${{ github.event.inputs.service }}" >> $GITHUB_ENV
          fi

      # 2) SSH로 레포 동기화·.env 생성·해당 서비스만 배포
      - name: Sync & Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        # step-level env: 이 변수가 with.envs: 에 의해 원격에도 전달됩니다
        env:
          SERVICE: ${{ env.SERVICE }}
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          # 원격 셸에 넘길 env 이름 목록
          envs: |
            SERVICE
          script: |
            # 1) ~/deploy 준비
            mkdir -p ~/deploy
            cd ~/deploy

            # 2) todo-deploy 레포 클론 또는 pull
            if [ ! -d .git ]; then
              git clone https://github.com/hc-organizations/todo-deploy.git .
            else
              git pull origin main
            fi

            # 3) .env 파일 덮어쓰기
            cat > .env <<EOF
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            API_URL=${{ secrets.API_URL }}
            NEXT_PUBLIC_API_ENDPOINT=${{ secrets.NEXT_PUBLIC_API_ENDPOINT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            ASYNC_DATABASE_URL=${{ secrets.ASYNC_DATABASE_URL }}
            SYNC_DATABASE_URL=${{ secrets.SYNC_DATABASE_URL }}
            DB_ECHO_LOG=${{ secrets.DB_ECHO_LOG }}
            EOF

            # 4) 변경된 서비스만 pull & up
            cd ~/deploy
            docker compose pull "$SERVICE"
            docker compose up -d "$SERVICE"
