name: Deploy to VM

on:
  repository_dispatch:
    types: [frontend-update, backend-update]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DEPLOY_DIR: /home/${{ secrets.VM_USER }}/deploy

    steps:
      - name: Set SERVICE from dispatch payload
        run: echo "SERVICE=${{ github.event.client_payload.service }}" >> $GITHUB_ENV

      - name: Sync & Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            # 1) 클론 또는 pull
            if [ ! -d "$DEPLOY_DIR" ]; then
              git clone https://github.com/hc-organizations/todo-deploy.git "$DEPLOY_DIR"
            else
              cd "$DEPLOY_DIR"
              git pull origin main
            fi

            # 2) .env 덮어쓰기
            cat > "$DEPLOY_DIR/.env" <<EOF
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            API_URL=${{ secrets.API_URL }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            ASYNC_DATABASE_URL=${{ secrets.ASYNC_DATABASE_URL }}
            SYNC_DATABASE_URL=${{ secrets.SYNC_DATABASE_URL }}
            DB_ECHO_LOG=${{ secrets.DB_ECHO_LOG }}
            EOF

            # 3) 해당 서비스만 pull & up
            cd "$DEPLOY_DIR"
            docker compose pull "$SERVICE"
            docker compose up -d "$SERVICE"
